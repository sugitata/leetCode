# Definition for singly-linked list.
from typing import Optional


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


# @see https://medium.com/@ektadhobley/reorder-list-leetcode-medium-blind-75-linked-list-391f46780904
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        # L0 -> Ln -> L1 -> L(n-1) -> L2 -> L(n-2) „Åø„Åü„ÅÑ„Å´ÂÖ•„ÇåÊõø„Åà„Çã
        # [1,2,3,4]
        # slow: [1,2,3,4]
        slow = head
        # fast: [2,3,4]
        # head.next„Å´„Åó„Å¶„Åä„Åè„ÅÆ„ÅØ„ÄÅ[2]„Åã„Çâslow„ÅØ„Çπ„Çø„Éº„Éà„Åó„Åü„ÅÑ„Åã„Çâ
        fast = head.next

        # „ÅÑ„Å§„ÇÇ„ÅÆfast„ÅÆÂàÜ„Å†„ÅëÊúÄÂàù„Å´„Åö„Çâ„ÅôÊà¶Ê≥ï
        # fast.next.next„ÅßÔºëstep skip„Åô„Çã„ÅÆ„Åß„ÄÅ[1, 2, 3, 4] -> [2, 4] „Åø„Åü„ÅÑ„Å´„Å™„Çã
        while fast and fast.next:
            slow = slow.next
            # fast„ÅÆÂΩπÂâ≤„ÅØ„Åì„Åì„ÅßÁµÇ„Çè„Çä
            # slow„ÅÆ‰ΩçÁΩÆ„Çí„Åö„Çâ„Åô„Å†„Åë
            fast = fast.next.next

        # ? „Åì„Åì„Åå‰∏ÄÁï™„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑ
        # e.g. second = [2,3,4]
        # head of second list
        second = slow.next  # second: [3, 4]
        # pointing tail of first list to null
        # „Åì„Åì„Åßslow„ÅÆÂΩπÁõÆ„ÅØÁµÇ‰∫Ü„ÄÄ„ÅÇ„Å®„ÅØsecond
        slow.next = None  # slow: [2]
        # prev„Å®„ÅØÔºü
        prev = None

        # head„Åå„Åì„ÅÆÊÆµÈöé„Åß [1,2,3,4]„Åã„Çâ[1,2]„Å´„Å™„Çã
        # slow: [2,3,4] „Åß„ÄÅ„ÄÄslow.next = None „Å´„Åó„Åü„Åã„Çâ
        # üîµ ‰Ωø„ÅÑÁµÇ„Çè„Å£„Åü slow„Çí„Çè„Åñ„Çè„ÅñNone„Å´„Åó„Å¶„ÅÑ„Çã„ÅÆ„ÅØ„ÄÅhead„Çí„ÅÑ„Åò„Çã„Åü„ÇÅ„Å†„Å£„Åü„Çì„Å†Ôºë

        # reverse
        # second.next„ÇíÈÄÄÈÅø„Åï„Åõ„Å¶ÂÖ•„ÇåÊèõ„Åà„Å¶„ÅÑ„Çã [3, 4] => [4, 3] „Å´„Å™„Çã
        while second:
            temp = second.next
            second.next = prev
            prev = second
            second = temp

        # merge two halves (half)
        first, second = head, prev
        while second:
            temp1 = first.next
            temp2 = second.next

            first.next = second
            second.next = temp1
            first = temp1
            second = temp2
